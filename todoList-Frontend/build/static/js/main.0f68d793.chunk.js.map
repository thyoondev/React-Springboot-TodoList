{"version":3,"sources":["components/Template.tsx","common/typeInterface/Enum.tsx","components/todoHead/WeatherApi.tsx","common/action/Action.tsx","common/style/DarkMode.tsx","components/todoHead/TodoHead.tsx","components/todoContainer/TodoContent.tsx","components/todoContainer/TodoItem.tsx","components/modal/element/ItemContent.tsx","components/modal/element/ItemTitle.tsx","components/modal/element/InfoContent.tsx","components/modal/element/InfoTitle.tsx","components/modal/ModalUpdate.tsx","components/modal/ModalCreate.tsx","components/todoContainer/TodoList.tsx","components/App.tsx","common/reducer/Reducer.tsx","common/typeInterface/restApiUrl.tsx","common/saga/Saga.tsx","index.tsx"],"names":["TodoTemplateBlock","styled","div","props","isDarkModeActive","css","TodoTemplate","typesEnum","restApiEnum","useSelector","store","children","WeatherApi","useState","main","temp","weather","description","setWeather","useEffect","fetch","then","res","json","result","className","toFixed","toggleModalUpdate","id","type","TOGGLE_MODAL_UPDATE","payload","toggleModalCreate","TOGGLE_MODAL_CREATE","DarkMode","dispatch","useDispatch","onClick","TOGGLE_DARK","data-icon","data-inline","TodoHeadBlock","TodoHead","undoneTasks","todoList","filter","todo","process","dateString","moment","format","dayName","length","Text","ViewText","ContentBox","Priority","priority","Author","TodoContent","rawString","title","expUrl","RegExp","match","dangerouslySetInnerHTML","__html","indexOf","replace","text","author","Remove","TodoItemBlock","TodoItem","clickHandler","DELETE_POST","ItemContentDiv","textarea","ItemContent","content","onChange","value","name","placeholder","TitleDiv","input","ItemTitle","autoFocus","InfoContentDiv","SelectBox","select","InputBox","processLabel","label","priorityLabel","InfoContent","createdDate","readOnly","map","item","index","InfoTitleDiv","InfoTitleas","infoTitleLabel","InfoTitle","Modal","setAppElement","ModalBox","InfoBox","DetailPage","modalIsOpen","showModal","showEdit","inputs","setInputs","e","target","onUpdate","UPDATE_POST","updatePost","_createdDate","isOpen","onRequestClose","contentLabel","overlayClassName","style","background","transition","color","ModalCreate","showCreate","onWrite","CREATE_POST","TodoListBlock","TodoListBlockInner","TodoListProcessTitleBox","TodoListProcessTitleBoxInner","TodoListProcessTitle","processValue","CreateItem","TodoMediaTitle","BlankBox","CreateItemTitle","span","TodoList","GET_POST","sort","a","b","modal","showListProcess","onModalCreate","ModalUpdate","App","Template","inistate","reducer","state","action","GET_POST_SUCCESS","concat","GET_POST_ERORR","alert","console","error","CREATE_POST_SUCCESS","CREATE_POST_ERORR","UPDATE_POST_SUCCESS","UPDATE_POST_ERORR","DELETE_POST_SUCCESS","DELETE_POST_ERORR","RESTAPIURL","rootSaga","RestApiSaga","getPostSaga","createPostSaga","updatePostSaga","deletePostSaga","all","takeLatest","put","method","POST","headers","body","JSON","stringify","status","PUT","DELETE","sagaMiddleware","createSagaMiddleware","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f68d793.chunk.js","sourcesContent":["//템플릿 컴포넌트\r\n\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst TodoTemplateBlock = styled.div<any>`\r\n  width: 1024px;\r\n  height: 768px;\r\n  position: relative; /* 추후 박스 하단에 추가 버튼을 위치시키기 위한 설정 */\r\n  transition: background-color 2s;\r\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\r\n  backdrop-filter: blur(0.5px);\r\n  -webkit-backdrop-filter: blur(0.5px);\r\n  border-radius: 30px;\r\n  margin: 0 auto;\r\n  margin-top: 96px;\r\n  margin-bottom: 32px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  transition: width 50ms;\r\n  ${(props) =>\r\n    props.isDarkModeActive\r\n      ? css`\r\n          background-color: rgba(255, 255, 255, 0.1);\r\n          transition: 'background-color 2s';\r\n          box-shadow: none;\r\n          border: 1px solid rgba(0, 0, 0, 0.3);\r\n          transition: 'border 2s';\r\n        `\r\n      : css`\r\n          background-color: rgba(255, 255, 255, 0.5);\r\n          transition: 'background-color 2s';\r\n        `}\r\n  @media screen and (max-width: 768px) {\r\n    width: 480px;\r\n    height: 850px;\r\n  }\r\n`;\r\n\r\nfunction TodoTemplate(props: any) {\r\n  const isDarkModeActive = useSelector((store: any) => store.isDarkModeActive);\r\n  const { children } = props;\r\n  return (\r\n    <TodoTemplateBlock isDarkModeActive={isDarkModeActive}>\r\n      {children}\r\n    </TodoTemplateBlock>\r\n  );\r\n}\r\n\r\nexport default TodoTemplate;\r\n","export enum typesEnum {\r\n  GET_POST = 'GET_POST',\r\n  GET_POST_SUCCESS = 'GET_POST_SUCCESS',\r\n  GET_POST_ERORR = 'GET_POST_ERORR',\r\n  CREATE_POST = 'CREATE_POST',\r\n  CREATE_POST_SUCCESS = 'CREATE_POST_SUCCESS',\r\n  CREATE_POST_ERORR = 'CREATE_POST_ERORR',\r\n  UPDATE_POST = 'UPDATE_POST',\r\n  UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS',\r\n  UPDATE_POST_ERORR = 'UPDATE_POST_ERORR',\r\n  DELETE_POST = 'DELETE_POST',\r\n  DELETE_POST_SUCCESS = 'DELETE_POST_SUCCESS',\r\n  DELETE_POST_ERORR = 'DELETE_POST_ERORR',\r\n  TOGGLE_MODAL_CREATE = 'TOGGLE_MODAL_CREATE',\r\n  TOGGLE_MODAL_UPDATE = 'TOGGLE_MODAL_UPDATE',\r\n  TOGGLE_DARK = 'TOGGLE_DARK',\r\n}\r\n\r\nexport enum restApiEnum {\r\n  GET = 'GET',\r\n  POST = 'POST',\r\n  PUT = 'PUT',\r\n  DELETE = 'DELETE',\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nconst WeatherApi = () => {\r\n  //날씨\r\n  //받아올 api 형식에 맞춰서 기본 state 구조를 만들어준다.\r\n  const [weather, setWeather] = useState({\r\n    main: { temp: 0 },\r\n    weather: [{ description: \"날씨\" }],\r\n  });\r\n\r\n  //openWeatherAPI url\r\n  const url =\r\n    \"http://api.openweathermap.org/data/2.5/weather?q=Seoul&appid=9baac3369dd75739c16d992d23f0b417&lang=kr&units=metric\";\r\n  /**\r\n   * json형식으로 날씨 api 데이터를 받아옴\r\n   */\r\n  const getWeather = () => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        //api 하루 사용량 초과로 임시로 아래와 같이 설정\r\n        //setWeather({ main: { temp: 15 }, weather: [{ description: \"맑음\" }] });\r\n        setWeather(result);\r\n      });\r\n  };\r\n\r\n  //class components의 lifecycle 대신 사용\r\n  useEffect(() => {\r\n    getWeather();\r\n    return () => {};\r\n  }, []);\r\n  return (\r\n    <div className=\"weather\">\r\n      <div className=\"weatherTemp\">\r\n        <p className=\"weatherTempInner\">{weather.main.temp.toFixed(0)}</p>\r\n        °C\r\n      </div>\r\n      <div className=\"weatherDescription\">{weather.weather[0].description}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherApi;\r\n","import React from 'react';\r\nimport { typesEnum } from '../typeInterface/Enum';\r\nimport { todoTypes } from '../typeInterface/types';\r\n\r\n//액션\r\n//조회\r\nexport const getPostSuccess = (todoList: todoTypes[]) => ({\r\n  type: typesEnum.GET_POST_SUCCESS,\r\n  payload: { todoList: todoList },\r\n});\r\nexport const getPost = () => ({\r\n  type: typesEnum.GET_POST,\r\n});\r\nexport const getPostError = (error: string) => ({\r\n  type: typesEnum.GET_POST_ERORR,\r\n  payload: { error: error },\r\n});\r\n\r\n//생성\r\nexport const createPost = (todo: todoTypes) => ({\r\n  type: typesEnum.CREATE_POST,\r\n  payload: { todo: todo },\r\n});\r\nexport const createPostSuccess = (todo: todoTypes) => ({\r\n  type: typesEnum.CREATE_POST_SUCCESS,\r\n  payload: { todo: todo },\r\n});\r\nexport const createPostError = (error: string) => ({\r\n  type: typesEnum.CREATE_POST_ERORR,\r\n  payload: { error: error },\r\n});\r\n\r\n//수정\r\nexport const updatePost = (todo: todoTypes) => ({\r\n  type: typesEnum.UPDATE_POST,\r\n  payload: { todo: todo },\r\n});\r\nexport const updateSuccess = (todo: todoTypes) => ({\r\n  type: typesEnum.UPDATE_POST_SUCCESS,\r\n  payload: { todo: todo },\r\n});\r\nexport const updatePostError = (error: string) => ({\r\n  type: typesEnum.UPDATE_POST_ERORR,\r\n  payload: { error: error },\r\n});\r\n\r\n//삭제\r\nexport const deletePost = (id: number) => ({\r\n  type: typesEnum.DELETE_POST,\r\n  payload: { id: id },\r\n});\r\nexport const deleteSuccess = (id: number) => ({\r\n  type: typesEnum.DELETE_POST_SUCCESS,\r\n  payload: { id: id },\r\n});\r\nexport const deleteError = (error: string) => ({\r\n  type: typesEnum.DELETE_POST_ERORR,\r\n  payload: { error: error },\r\n});\r\n\r\n//모달\r\nexport const toggleModalUpdate = (id: number) => ({\r\n  type: typesEnum.TOGGLE_MODAL_UPDATE,\r\n  payload: { id: id },\r\n});\r\nexport const toggleModalCreate = () => ({ type: typesEnum.TOGGLE_MODAL_CREATE });\r\nexport const toggleDarkMode = () => ({ type: typesEnum.TOGGLE_DARK });\r\n\r\nconst Action = () => {\r\n  return <div></div>;\r\n};\r\n\r\nexport default Action;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleDarkMode } from '../action/Action';\r\nimport './DarkMode.css';\r\n\r\nconst DarkMode = () => {\r\n  const dispatch = useDispatch();\r\n  const toggleDark = () => dispatch(toggleDarkMode());\r\n  return (\r\n    <label>\r\n      <input\r\n        onClick={toggleDark}\r\n        className=\"toggle-checkbox\"\r\n        type=\"checkbox\"\r\n      ></input>\r\n      <div className=\"toggle-slot\">\r\n        <div className=\"sun-icon-wrapper\">\r\n          <div\r\n            className=\"iconify sun-icon\"\r\n            data-icon=\"feather-sun\"\r\n            data-inline=\"false\"\r\n          ></div>\r\n        </div>\r\n        <div className=\"toggle-button\"></div>\r\n        <div className=\"moon-icon-wrapper\">\r\n          <div\r\n            className=\"iconify moon-icon\"\r\n            data-icon=\"feather-moon\"\r\n            data-inline=\"false\"\r\n          ></div>\r\n        </div>\r\n      </div>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default DarkMode;\r\n","// 오늘의 날짜, 요일, 할 일 개수 보여주는 컴포넌트\r\n\r\nimport React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport moment from 'moment';\r\nimport 'moment/locale/ko'; // 이줄 추가\r\nimport WeatherApi from './WeatherApi';\r\nimport { useSelector } from 'react-redux';\r\nimport DarkMode from '../../common/style/DarkMode';\r\nimport { inistateTypes, todoTypes } from '../../common/typeInterface/types';\r\n\r\nconst TodoHeadBlock = styled.div<any>`\r\n  padding-top: 35px;\r\n  padding-left: 32px;\r\n  padding-right: 32px;\r\n  padding-bottom: 20px;\r\n  background: rgba(255, 255, 255, 0.65);\r\n  backdrop-filter: blur(7.5px);\r\n  -webkit-backdrop-filter: blur(7.5px);\r\n  border-radius: 30px 30px 0px 0px;\r\n  border: 1px solid rgba(255, 255, 255, 0.18);\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 38px;\r\n    color: #343a40;\r\n    ${(props) =>\r\n      props.isDarkModeActive &&\r\n      css`\r\n        color: #fff;\r\n        transition: color 2s;\r\n      `}\r\n  }\r\n  .day {\r\n    margin-top: 4px;\r\n    color: #868e96;\r\n    font-size: 21px;\r\n    ${(props) =>\r\n      props.isDarkModeActive &&\r\n      css`\r\n        color: #fff;\r\n        transition: color 2s;\r\n      `}\r\n  }\r\n  .tasks-left {\r\n    color: #20c997;\r\n    font-size: 18px;\r\n    margin-top: 40px;\r\n    font-weight: bold;\r\n    ${(props) =>\r\n      props.isDarkModeActive &&\r\n      css`\r\n        color: #fdca40;\r\n        transition: color 2s;\r\n      `}\r\n  }\r\n  .weather {\r\n    float: right;\r\n    margin: 0;\r\n    font-size: 24px;\r\n    display: inline-block;\r\n  }\r\n  .weatherTemp {\r\n    margin: 0;\r\n    font-size: 24px;\r\n    color: #868e96;\r\n    display: inline-block;\r\n    margin-right: 10px;\r\n    ${(props) =>\r\n      props.isDarkModeActive &&\r\n      css`\r\n        color: #fff;\r\n        transition: color 2s;\r\n      `}\r\n  }\r\n  .weatherTempInner {\r\n    margin: 0;\r\n    font-size: 80px;\r\n    color: #868e96;\r\n    display: inline-block;\r\n    margin-right: 10px;\r\n    ${(props) =>\r\n      props.isDarkModeActive &&\r\n      css`\r\n        color: #fff;\r\n        transition: color 2s;\r\n      `}\r\n  }\r\n  .weatherDescription {\r\n    margin: 0;\r\n    font-size: 24px;\r\n    color: skyblue;\r\n    display: inline-block;\r\n    margin-right: 10px;\r\n    ${(props) =>\r\n      props.isDarkModeActive &&\r\n      css`\r\n        color: #fdca40;\r\n        transition: color 2s;\r\n      `}\r\n  }\r\n  .dark-mode {\r\n    position: relative;\r\n    float: right;\r\n  }\r\n  ${(props) =>\r\n    props.isDarkModeActive &&\r\n    css`\r\n      background-color: rgba(0, 0, 0, 0.4);\r\n      transition: background-color 2s;\r\n      border: none;\r\n    `}\r\n`;\r\n\r\nfunction TodoHead() {\r\n  const isDarkModeActive = useSelector((store: inistateTypes) => store.isDarkModeActive);\r\n  const todoList = useSelector((store: inistateTypes) => store.todoList);\r\n  const undoneTasks = todoList.filter((todo: todoTypes) => todo.process !== 2);\r\n\r\n  const dateString = moment().format('YYYY년 MM월 DD일');\r\n  const dayName = moment().format('dd요일');\r\n\r\n  return (\r\n    <TodoHeadBlock isDarkModeActive={isDarkModeActive}>\r\n      <div className=\"dark-mode\">\r\n        <DarkMode />\r\n      </div>\r\n      <h1>{dateString}</h1>\r\n      <div className=\"day\">\r\n        {dayName}\r\n        <WeatherApi />\r\n      </div>\r\n      <div className=\"tasks-left\">할 일 {undoneTasks.length}개 남음</div>\r\n    </TodoHeadBlock>\r\n  );\r\n}\r\n\r\nexport default TodoHead;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled, { css } from 'styled-components';\r\nimport { toggleModalUpdate } from '../../common/action/Action';\r\nimport './TodoContent.css';\r\n\r\nconst Text = styled.div<any>`\r\n  flex: 1;\r\n  font-size: 15px;\r\n  color: #495057;\r\n  word-break: keep-all;\r\n  ${(props) =>\r\n    props.isDarkModeActive &&\r\n    css`\r\n      color: #fff;\r\n      transition: color 2s;\r\n    `}\r\n`;\r\nconst ViewText = styled.div`\r\n  white-space: pre-wrap; //공백을 코드에 있는 그대로 표시함, 코드에 줄바꿈이 없어도 자동 줄바꿈이 됨\r\n`;\r\n\r\nconst ContentBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  cursor: pointer;\r\n`;\r\nconst Priority = styled.div<any>`\r\n  font-size: 10px;\r\n  padding: 2px 3px;\r\n  background-color: #fab1a0;\r\n  border-radius: 3px;\r\n  text-align: center;\r\n  margin: 5px 0px;\r\n  width: 70px;\r\n  color: #495057;\r\n  ${(props) =>\r\n    props.priority === 0\r\n      ? css`\r\n          background-color: #ffadad;\r\n        `\r\n      : props.priority === 1\r\n      ? css`\r\n          background-color: #ffd6a5;\r\n        `\r\n      : props.priority === 2\r\n      ? css`\r\n          background-color: #fdffb6;\r\n        `\r\n      : props.priority === 3\r\n      ? css`\r\n          background-color: #caffbf;\r\n        `\r\n      : props.priority === 4\r\n      ? css`\r\n          background-color: #9bf6ff;\r\n        `\r\n      : css`\r\n          background-color: #a0c4ff;\r\n        `}\r\n`;\r\n\r\nconst Author = styled.div`\r\n  font-size: 10px;\r\n  padding: 2px 10px;\r\n  background-color: #e5e5e5;\r\n  width: fit-content;\r\n  border-radius: 3px;\r\n  color: #495057;\r\n`;\r\nconst TodoContent = (props: any) => {\r\n  const { todo } = props;\r\n  //웹 링크 처리\r\n  let rawString = todo.title;\r\n  let expUrl = new RegExp('(http|https|ftp|telnet|news|irc)://([-/.a-zA-Z0-9_~#%$?&=:200-377()]+)', 'gi');\r\n  let result = rawString.match(expUrl);\r\n\r\n  //텍스트에 htt 가 포함되면 a태그로 감싸주고 포함되어있지않으면 raw string 그대로 출력\r\n  const getText = () => {\r\n    if (todo.title.indexOf(result) !== -1) {\r\n      return rawString.replace(result, `<a href=\"${result}\" target=\"_blank\"> ${result} </a>`, todo.text);\r\n    } else {\r\n      return todo.title;\r\n    }\r\n  };\r\n  const dispatch = useDispatch();\r\n  const onModalEdit = () => dispatch(toggleModalUpdate(todo.id));\r\n  const isDarkModeActive = useSelector((store: any) => store.isDarkModeActive);\r\n  return (\r\n    <>\r\n      <ContentBox onClick={onModalEdit}>\r\n        <Text process={todo.process} isDarkModeActive={isDarkModeActive}>\r\n          <ViewText dangerouslySetInnerHTML={{ __html: getText() }} />\r\n        </Text>\r\n        <Priority priority={todo.priority}>\r\n          우선 순위 {todo.priority} {todo.priority === 0 && '🔥'}\r\n        </Priority>\r\n        <Author>{todo.author}</Author>\r\n      </ContentBox>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoContent;\r\n","//게시글에 해당하는 배열 오브젝트를 하나하나 따로 받아 화면에 렌더링해주는 컴포넌트\r\n\r\nimport styled, { css } from 'styled-components';\r\nimport { MdDelete } from 'react-icons/md';\r\nimport 'moment/locale/ko';\r\nimport TodoContent from './TodoContent';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { inistateTypes, todoTypes } from '../../common/typeInterface/types';\r\nimport { deletePost } from '../../common/action/Action';\r\n\r\nconst Remove = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #dee2e6;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: #ff6b6b;\r\n  }\r\n  display: none;\r\n`;\r\n\r\nconst TodoItemBlock = styled.div<any>`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 15px;\r\n  margin-top: 6px;\r\n  width: 90%;\r\n  height: 80px;\r\n  background: rgba(255, 255, 255, 0.7);\r\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.2);\r\n  border-radius: 20px;\r\n  border: 1px solid rgba(255, 255, 255, 0.18);\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  &:hover {\r\n    background: rgba(255, 255, 255, 0.1);\r\n    ${Remove} {\r\n      display: flex;\r\n    }\r\n  }\r\n  ${(props) =>\r\n    props.isDarkModeActive &&\r\n    css`\r\n      background-color: rgba(0, 0, 0, 0.2);\r\n      transition: background-color 2s;\r\n      border: 1px solid rgba(0, 0, 0, 0.1);\r\n      transition: border 2s;\r\n      box-shadow: none;\r\n    `}\r\n  @media screen and (max-width: 768px) {\r\n    max-width: 40%;\r\n  }\r\n`;\r\n\r\nfunction TodoItem(props: any) {\r\n  const todo: todoTypes = props.todo;\r\n  const isDarkModeActive = useSelector((store: inistateTypes) => store.isDarkModeActive);\r\n  const dispatch = useDispatch();\r\n  const onRemove = () => {\r\n    dispatch(deletePost(todo.id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TodoItemBlock title={todo.title} isDarkModeActive={isDarkModeActive}>\r\n        <TodoContent todo={todo} onClick={() => props.clickHandler(todo)} />\r\n        <Remove>\r\n          <MdDelete onClick={onRemove} />\r\n        </Remove>\r\n      </TodoItemBlock>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ItemContentDiv = styled.textarea`\r\n  font-size: 18px;\r\n  padding: 30px 10px;\r\n  border: 0px;\r\n  border-radius: 10px;\r\n  background: rgba(255, 255, 255, 0);\r\n  outline: none;\r\n  width: 100%;\r\n  height: 300px;\r\n  overflow-y: auto;\r\n  color: #868e96;\r\n`;\r\nconst ItemContent = (props: any) => {\r\n  const { content, onChange } = props;\r\n  return (\r\n    <ItemContentDiv\r\n      value={content}\r\n      className=\"content\"\r\n      name=\"content\"\r\n      onChange={onChange}\r\n      placeholder=\"내용을 입력해 주세요.\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ItemContent;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TitleDiv = styled.input`\r\n  font-size: 32px;\r\n  outline: none;\r\n  border: none;\r\n`;\r\nconst ItemTitle = (props: any) => {\r\n  const { onChange, title } = props;\r\n  return (\r\n    <TitleDiv\r\n      type=\"text\"\r\n      value={title}\r\n      className=\"input title\"\r\n      name=\"title\"\r\n      onChange={onChange}\r\n      placeholder=\"제목 없음\"\r\n      autoFocus\r\n    />\r\n  );\r\n};\r\n\r\nexport default ItemTitle;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst InfoContentDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n`;\r\n\r\nconst SelectBox = styled.select`\r\n  width: 100%;\r\n  color: #868e96;\r\n  font-size: 16px;\r\n  padding: 8px 5px;\r\n  border: 0px;\r\n  outline: none;\r\n  background: url('../../image/arrow.jpg') no-repeat 95% 50%;\r\n  border-radius: 10px;\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n  appearance: none;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: rgba(0, 0, 0, 0.05);\r\n  }\r\n`;\r\n\r\nconst InputBox = styled.input`\r\n  background: rgba(255, 255, 255, 0);\r\n  width: 100%;\r\n  height: 30px;\r\n  border: 0px;\r\n  outline: none;\r\n  border-radius: 10px;\r\n  padding: 5px;\r\n  color: #868e96;\r\n  font-size: 16px;\r\n\r\n  &:hover {\r\n    background: rgba(0, 0, 0, 0.05);\r\n  }\r\n`;\r\n\r\nconst processLabel = [\r\n  { label: '진행 전' },\r\n  { label: '진행 중' },\r\n  { label: '완료 🙌' },\r\n];\r\n\r\nconst priorityLabel = [\r\n  { label: '우선순위 0 🔥' },\r\n  { label: '우선순위 1' },\r\n  { label: '우선순위 2' },\r\n  { label: '우선순위 3' },\r\n  { label: '우선순위 4' },\r\n  { label: '우선순위 5' },\r\n];\r\n\r\nconst InfoContent = (props: any) => {\r\n  const { onChange, createdDate, process, priority, author } = props;\r\n  return (\r\n    <InfoContentDiv>\r\n      <div>\r\n        <InputBox type=\"text\" value={createdDate} readOnly />\r\n      </div>\r\n      <div>\r\n        <SelectBox name=\"process\" value={process} onChange={onChange}>\r\n          {processLabel.map((item, index) => (\r\n            <option key={index} value={index}>\r\n              {item.label}\r\n            </option>\r\n          ))}\r\n        </SelectBox>\r\n      </div>\r\n      <div>\r\n        <SelectBox name=\"priority\" value={priority} onChange={onChange}>\r\n          {priorityLabel.map((item, index) => (\r\n            <option key={index} value={index}>\r\n              {item.label}\r\n            </option>\r\n          ))}\r\n        </SelectBox>\r\n      </div>\r\n      <div>\r\n        <InputBox\r\n          type=\"text\"\r\n          name=\"author\"\r\n          value={author}\r\n          onChange={onChange}\r\n          placeholder=\"작성자를 입력해 주세요.\"\r\n        />\r\n      </div>\r\n    </InfoContentDiv>\r\n  );\r\n};\r\n\r\nexport default InfoContent;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst InfoTitleDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 150px;\r\n`;\r\n\r\nconst InfoTitleas = styled.div`\r\n  margin: 8px 0px;\r\n`;\r\n\r\nconst infoTitleLabel = [\r\n  { label: '📆 작성일시' },\r\n  { label: '🚦 상태' },\r\n  { label: '🚨 우선 순위' },\r\n  { label: '✍ 작성자' },\r\n];\r\n\r\nconst InfoTitle = () => {\r\n  return (\r\n    <InfoTitleDiv>\r\n      {infoTitleLabel.map((item, index) => (\r\n        <InfoTitleas key={index}>{item.label}</InfoTitleas>\r\n      ))}\r\n    </InfoTitleDiv>\r\n  );\r\n};\r\n\r\nexport default InfoTitle;\r\n","import React, { useState } from 'react';\r\nimport Modal from 'react-modal';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { toggleModalUpdate, updatePost } from '../../common/action/Action';\r\nimport './Style.css';\r\nimport moment from 'moment';\r\nimport 'moment/locale/ko';\r\nimport ItemContent from './element/ItemContent';\r\nimport ItemTitle from './element/ItemTitle';\r\nimport InfoContent from './element/InfoContent';\r\nimport InfoTitle from './element/InfoTitle';\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst ModalBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst InfoBox = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nfunction DetailPage(props: any) {\r\n  const dispatch = useDispatch();\r\n  const modalIsOpen = useSelector((store: any) => store.showModal.showEdit);\r\n  const isDarkModeActive = useSelector((store: any) => store.isDarkModeActive);\r\n\r\n  const { todo } = props;\r\n  const [inputs, setInputs] = useState({\r\n    id: todo.id,\r\n    title: todo.title,\r\n    content: todo.content,\r\n    author: todo.author,\r\n    priority: todo.priority,\r\n    createdDate: todo.createdDate,\r\n    process: todo.process,\r\n  });\r\n\r\n  const { title, createdDate, process, priority, author, content } = inputs;\r\n\r\n  const onChange = (e: any) => {\r\n    const { name, value } = e.target;\r\n    setInputs({\r\n      ...inputs,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const onUpdate = () => {\r\n    dispatch(updatePost(inputs));\r\n  };\r\n\r\n  const offModal = () => {\r\n    title !== '' && onUpdate();\r\n    dispatch(toggleModalUpdate(-1));\r\n  };\r\n\r\n  const _createdDate = moment(createdDate, 'YYYYMMDDHHmmss').format('YYYY년 MM월 DD일 A hh:mm');\r\n\r\n  return (\r\n    <Modal\r\n      key={todo.id}\r\n      isOpen={modalIsOpen}\r\n      onRequestClose={offModal}\r\n      contentLabel=\"Example Modal\"\r\n      className=\"Modal\"\r\n      overlayClassName=\"Overlay\"\r\n      style={\r\n        isDarkModeActive && {\r\n          content: {\r\n            background: 'rgba(0, 0, 0, 0.85)',\r\n            transition: 'background color 2s',\r\n            color: '#fff',\r\n          },\r\n        }\r\n      }\r\n    >\r\n      <form>\r\n        <ModalBox>\r\n          <ItemTitle onChange={onChange} title={title} />\r\n          <br />\r\n          <InfoBox>\r\n            <InfoTitle />\r\n            <InfoContent\r\n              onChange={onChange}\r\n              createdDate={_createdDate}\r\n              process={process}\r\n              priority={priority}\r\n              author={author}\r\n            />\r\n          </InfoBox>\r\n          <div>\r\n            <ItemContent onChange={onChange} content={content} />\r\n          </div>\r\n        </ModalBox>\r\n      </form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default DetailPage;\r\n","import React, { useState } from 'react';\r\nimport Modal from 'react-modal';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { createPost, toggleModalCreate } from '../../common/action/Action';\r\nimport './Style.css';\r\nimport moment from 'moment';\r\nimport 'moment/locale/ko';\r\nimport InfoTitle from './element/InfoTitle';\r\nimport InfoContent from './element/InfoContent';\r\nimport ItemTitle from './element/ItemTitle';\r\nimport ItemContent from './element/ItemContent';\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst ModalBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst InfoBox = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nfunction ModalCreate() {\r\n  const dispatch = useDispatch();\r\n  const modalIsOpen = useSelector((store: any) => store.showModal.showCreate);\r\n  const isDarkModeActive = useSelector((store: any) => store.isDarkModeActive);\r\n\r\n  const [inputs, setInputs] = useState({\r\n    id: 0,\r\n    title: '',\r\n    content: '',\r\n    priority: 0,\r\n    createdDate: moment().format('YYYYMMDDHHmmss'),\r\n    process: 0,\r\n    author: '',\r\n  });\r\n\r\n  const { title, createdDate, process, priority, author, content } = inputs;\r\n\r\n  const onChange = (e: any) => {\r\n    const { name, value } = e.target;\r\n    setInputs({\r\n      ...inputs,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const onWrite = () => {\r\n    dispatch(createPost(inputs));\r\n  };\r\n\r\n  const offModalCreate = () => {\r\n    title !== '' && onWrite();\r\n    dispatch(toggleModalCreate());\r\n  };\r\n\r\n  const _createdDate = moment(createdDate, 'YYYYMMDDHHmmss').format('YYYY년 MM월 DD일 A hh:mm');\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={modalIsOpen}\r\n      onRequestClose={offModalCreate}\r\n      contentLabel=\"Example Modal\"\r\n      className=\"Modal\"\r\n      overlayClassName=\"Overlay\"\r\n      style={\r\n        isDarkModeActive && {\r\n          content: {\r\n            background: 'rgba(0, 0, 0, 0.85)',\r\n            transition: 'background color 2s',\r\n            color: '#fff',\r\n          },\r\n        }\r\n      }\r\n    >\r\n      <form>\r\n        <ModalBox>\r\n          <ItemTitle onChange={onChange} title={title} />\r\n          <br />\r\n          <InfoBox>\r\n            <InfoTitle />\r\n            <InfoContent\r\n              onChange={onChange}\r\n              createdDate={_createdDate}\r\n              process={process}\r\n              priority={priority}\r\n              author={author}\r\n            />\r\n          </InfoBox>\r\n          <div>\r\n            <ItemContent onChange={onChange} content={content} />\r\n          </div>\r\n        </ModalBox>\r\n      </form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ModalCreate;\r\n","//게시글 리스트을 개별적으로 뿌려주고 정렬을 하는 컴포넌트\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport TodoItem from './TodoItem';\r\nimport ModalUpdate from '../modal/ModalUpdate';\r\nimport { getPost, toggleModalCreate } from '../../common/action/Action';\r\nimport { inistateTypes, todoTypes } from '../../common/typeInterface/types';\r\nimport ModalCreate from '../modal/ModalCreate';\r\n\r\nconst TodoListBlock = styled.div`\r\n  display: flex;\r\n  overflow-y: auto;\r\n  -ms-overflow-style: none; /* IE and Edge */\r\n  scrollbar-width: none; /* Firefox */\r\n  &::-webkit-scrollbar {\r\n    display: none; /* Chrome, Safari, Opera*/\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\nconst TodoListBlockInner = styled.div<any>`\r\n  flex: 1;\r\n  padding: 0px 32px 48px 32px;\r\n  margin-top: 0px;\r\n  overflow-y: auto;\r\n  -ms-overflow-style: none; /* IE and Edge */\r\n  scrollbar-width: none; /* Firefox */\r\n  &::-webkit-scrollbar {\r\n    display: none; /* Chrome, Safari, Opera*/\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    flex-wrap: wrap;\r\n  }\r\n`;\r\nconst TodoListProcessTitleBox = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  @media screen and (max-width: 768px) {\r\n    display: none;\r\n  }\r\n`;\r\nconst TodoListProcessTitleBoxInner = styled.div`\r\n  flex: 1;\r\n`;\r\nconst TodoListProcessTitle = styled.div<any>`\r\n  max-width: 70px;\r\n  ${(props) =>\r\n    props.processValue === 0\r\n      ? css`\r\n          background-color: #fec3a6;\r\n        `\r\n      : props.processValue === 1\r\n      ? css`\r\n          background-color: #efe9ae;\r\n        `\r\n      : css`\r\n          background-color: #cdeac0;\r\n        `}\r\n  border-radius: 5px;\r\n  text-align: center;\r\n  padding: 0px 5px;\r\n  margin: 10px 0px 10px 32px;\r\n  color: #495057;\r\n  ${(props) =>\r\n    props.isDarkModeActive &&\r\n    css`\r\n      background-color: #fdca40;\r\n      transition: background-color 2s;\r\n    `}\r\n`;\r\n\r\nconst CreateItem = styled.div`\r\n  color: #495057;\r\n  cursor: pointer;\r\n  padding: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  border-radius: 20px;\r\n  width: 90%;\r\n  margin-top: 6px;\r\n  &:hover {\r\n    background: rgba(0, 0, 0, 0.1);\r\n  }\r\n`;\r\n\r\nconst TodoMediaTitle = styled.div<any>`\r\n  display: none;\r\n  min-width: 480px;\r\n  height: 30px;\r\n  ${(props) =>\r\n    props.processValue === 0\r\n      ? css`\r\n          background-color: #fec3a6;\r\n        `\r\n      : props.processValue === 1\r\n      ? css`\r\n          background-color: #efe9ae;\r\n        `\r\n      : css`\r\n          background-color: #cdeac0;\r\n        `}\r\n  border-radius: 5px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 0px 0px 5px 0px;\r\n  padding: 0px 0px;\r\n  color: #495057;\r\n  position: fixed;\r\n  ${(props) =>\r\n    props.isDarkModeActive &&\r\n    css`\r\n      background-color: #fdca40;\r\n      transition: background-color 2s;\r\n    `}\r\n  @media screen and (max-width: 768px) {\r\n    display: flex;\r\n  }\r\n`;\r\nconst BlankBox = styled.div`\r\n  display: none;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n  }\r\n`;\r\nconst CreateItemTitle = styled.span<any>`\r\n  color: #495057;\r\n  ${(props) =>\r\n    props.isDarkModeActive &&\r\n    css`\r\n      color: #fff;\r\n      transition: color 2s;\r\n    `}\r\n`;\r\n\r\nfunction TodoList() {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(getPost());\r\n  }, []);\r\n\r\n  const todoList = useSelector((store: inistateTypes) => store.todoList);\r\n  todoList.sort((a: todoTypes, b: todoTypes) => a.id - b.id);\r\n  todoList.sort((a: todoTypes, b: todoTypes) => a.priority - b.priority);\r\n\r\n  const modal = useSelector((store: inistateTypes) => store.showModal);\r\n  const isDarkModeActive = useSelector((store: inistateTypes) => store.isDarkModeActive);\r\n  const processLabel: string[] = ['진행 전', '진행 중', '완료 🙌'];\r\n\r\n  //프로세스 상태에 따라 출력\r\n  const showListProcess = (todoList: todoTypes[], processValue: number) => {\r\n    return todoList.map(\r\n      (todo: todoTypes, index: number) => todo.process === processValue && <TodoItem key={index} todo={todo} />,\r\n    );\r\n  };\r\n\r\n  const onModalCreate = () => dispatch(toggleModalCreate());\r\n\r\n  return (\r\n    <>\r\n      {modal.showEdit &&\r\n        todoList.map(\r\n          (todo: todoTypes, index: number) => todo.id === modal.id && <ModalUpdate key={index} todo={todo} />,\r\n        )}\r\n      {modal.showCreate && <ModalCreate />}\r\n\r\n      <TodoListProcessTitleBox>\r\n        {processLabel.map((item, index: number) => (\r\n          <TodoListProcessTitleBoxInner>\r\n            <TodoListProcessTitle key={index} processValue={index} isDarkModeActive={isDarkModeActive}>\r\n              {item}\r\n            </TodoListProcessTitle>\r\n          </TodoListProcessTitleBoxInner>\r\n        ))}\r\n      </TodoListProcessTitleBox>\r\n\r\n      <TodoListBlock>\r\n        {processLabel.map((item, index: number) => (\r\n          <TodoListBlockInner isDarkModeActive={isDarkModeActive}>\r\n            <TodoMediaTitle key={index} processValue={index} isDarkModeActive={isDarkModeActive}>\r\n              {item}\r\n            </TodoMediaTitle>\r\n            <BlankBox />\r\n            {showListProcess(todoList, index)}\r\n            <CreateItem onClick={onModalCreate}>\r\n              <CreateItemTitle isDarkModeActive={isDarkModeActive}>\r\n                <MdAdd />\r\n                새로 만들기\r\n              </CreateItemTitle>\r\n            </CreateItem>\r\n          </TodoListBlockInner>\r\n        ))}\r\n      </TodoListBlock>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport Template from './Template';\r\nimport TodoHead from './todoHead/TodoHead';\r\nimport TodoList from './todoContainer/TodoList';\r\nimport './App.css';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst App = () => {\r\n  const isDarkModeActive: boolean = useSelector((store: any) => store.isDarkModeActive);\r\n  return (\r\n    <>\r\n      <section\r\n        style={\r\n          isDarkModeActive\r\n            ? { background: '#424642', transition: 'background 2s' }\r\n            : { background: '#aeddef', transition: 'background 2s' }\r\n        }\r\n      >\r\n        <Template>\r\n          <TodoHead />\r\n          <TodoList />\r\n        </Template>\r\n        <div className=\"wave wave1\"></div>\r\n        <div className=\"wave wave2\"></div>\r\n        <div className=\"wave wave3\"></div>\r\n        <div className=\"wave wave4\"></div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\nexport default App;\r\n","import { typesEnum } from '../typeInterface/Enum';\r\nimport { action, inistateTypes, todoTypes } from '../typeInterface/types';\r\n\r\n//초기 상태 값\r\nconst inistate: inistateTypes = {\r\n  todoList: [],\r\n  showModal: { showEdit: false, id: -1, showCreate: false },\r\n  isDarkModeActive: false,\r\n};\r\n\r\n//리듀서\r\nconst reducer: any = (state: inistateTypes = inistate, action: action) => {\r\n  switch (action.type) {\r\n    //조회\r\n    case typesEnum.GET_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.concat(action.payload.todoList),\r\n      };\r\n    case typesEnum.GET_POST_ERORR:\r\n      return alert('조회에 실패하였습니다.'), console.error('[ERROR] getPostSaga() :', action.payload.error);\r\n    //생성\r\n    case typesEnum.CREATE_POST_SUCCESS:\r\n      return { ...state, todoList: state.todoList.concat(action.payload.todo) };\r\n    case typesEnum.CREATE_POST_ERORR:\r\n      return alert('등록에 실패하였습니다.'), console.error('[ERROR] createPostSaga() :', action.payload.error);\r\n    //수정\r\n    case typesEnum.UPDATE_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.map((todo: todoTypes) =>\r\n          todo.id === action.payload.todo.id\r\n            ? {\r\n                ...todo,\r\n                title: action.payload.todo.title,\r\n                content: action.payload.todo.content,\r\n                author: action.payload.todo.author,\r\n                priority: action.payload.todo.priority,\r\n                process: action.payload.todo.process,\r\n              }\r\n            : todo,\r\n        ),\r\n      };\r\n    case typesEnum.UPDATE_POST_ERORR:\r\n      return alert('수정에 실패하였습니다.'), console.error('[ERROR] updatePostSaga() :', action.payload.error);\r\n    //삭제\r\n    case typesEnum.DELETE_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.filter((todo: todoTypes) => todo.id !== action.payload.id),\r\n      };\r\n    case typesEnum.DELETE_POST_ERORR:\r\n      return alert('삭제에 실패하였습니다.'), console.error('[ERROR] deletePostSaga() :', action.payload.error);\r\n    case typesEnum.TOGGLE_MODAL_UPDATE:\r\n      return {\r\n        ...state,\r\n        showModal: {\r\n          ...state.showModal,\r\n          showEdit: !state.showModal.showEdit,\r\n          id: action.payload.id,\r\n        },\r\n      };\r\n    case typesEnum.TOGGLE_MODAL_CREATE:\r\n      return {\r\n        ...state,\r\n        showModal: { ...state.showModal, showCreate: !state.showModal.showCreate },\r\n      };\r\n    case typesEnum.TOGGLE_DARK:\r\n      return {\r\n        ...state,\r\n        isDarkModeActive: !state.isDarkModeActive,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","export const RESTAPIURL = 'http://localhost:8080/todoList/';\r\n","import { put, takeLatest } from 'redux-saga/effects';\r\nimport { restApiEnum, typesEnum } from '../typeInterface/Enum';\r\nimport {\r\n  createPostSuccess,\r\n  createPostError,\r\n  deleteSuccess,\r\n  deleteError,\r\n  getPostSuccess,\r\n  getPostError,\r\n  updateSuccess,\r\n  updatePostError,\r\n} from '../action/Action';\r\nimport { all } from 'redux-saga/effects';\r\nimport { RESTAPIURL } from '../typeInterface/restApiUrl';\r\nimport { action, todoTypes } from '../typeInterface/types';\r\n\r\nexport function* rootSaga() {\r\n  yield all([RestApiSaga()]); // all 은 배열 안의 여러 사가를 동시에 실행\r\n}\r\n\r\nexport function* RestApiSaga() {\r\n  yield takeLatest(typesEnum.GET_POST, getPostSaga);\r\n  yield takeLatest(typesEnum.CREATE_POST, createPostSaga);\r\n  yield takeLatest(typesEnum.UPDATE_POST, updatePostSaga);\r\n  yield takeLatest(typesEnum.DELETE_POST, deletePostSaga);\r\n}\r\n\r\n//조회(myBatis)\r\nfunction* getPostSaga() {\r\n  try {\r\n    const result: todoTypes[] = yield fetch(RESTAPIURL + 'myBatis')\r\n      .then((res) => res.json())\r\n      .then((res) => res);\r\n    yield put(getPostSuccess(result));\r\n  } catch (error) {\r\n    yield put(getPostError(error));\r\n  }\r\n}\r\n\r\n//생성\r\nfunction* createPostSaga(props: action) {\r\n  try {\r\n    const result: todoTypes = yield fetch(RESTAPIURL, {\r\n      method: restApiEnum.POST,\r\n      headers: {\r\n        'Content-Type': 'application/json; charset=utf-8',\r\n      },\r\n      body: JSON.stringify(props.payload.todo),\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 201) {\r\n          return res.json();\r\n        } else {\r\n          return null;\r\n        }\r\n      })\r\n      .then((res) => res);\r\n    yield put(createPostSuccess(result));\r\n  } catch (error) {\r\n    yield put(createPostError(error));\r\n  }\r\n}\r\n\r\n//업데이트\r\nfunction* updatePostSaga(props: action) {\r\n  try {\r\n    const result: todoTypes = yield fetch(RESTAPIURL + props.payload.todo.id, {\r\n      method: restApiEnum.PUT,\r\n      headers: {\r\n        'Content-Type': 'application/json; charset=utf-8',\r\n      },\r\n      body: JSON.stringify(props.payload.todo), //자바스크립트 오브젝트를 json으로 변경해서 던져주기\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          return res.json();\r\n        } else {\r\n          return null;\r\n        }\r\n      })\r\n      .then((res) => res);\r\n    yield put(updateSuccess(result));\r\n  } catch (error) {\r\n    yield put(updatePostError(error));\r\n  }\r\n}\r\n\r\n//삭제\r\nfunction* deletePostSaga(props: action) {\r\n  try {\r\n    const result: string = yield fetch(RESTAPIURL + props.payload.id, {\r\n      method: restApiEnum.DELETE,\r\n    })\r\n      .then((res) => res.text())\r\n      .then((res) => res);\r\n    if (result === 'ok') {\r\n      yield put(deleteSuccess(props.payload.id));\r\n    }\r\n  } catch (error) {\r\n    yield put(deleteError(error));\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, createStore } from 'redux';\r\n// import { Provider } from \"react-redux\";\r\n//import './index.css';\r\nimport App from './components/App';\r\nimport reducer from './common/reducer/Reducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { rootSaga } from './common/saga/Saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  composeWithDevTools(\r\n    applyMiddleware(\r\n      sagaMiddleware, // 사가 미들웨어를 적용하고\r\n    ),\r\n  ),\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}